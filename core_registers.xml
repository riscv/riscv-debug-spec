<registers name="Core Debug Registers">
    These registers are only accessible from Halt Mode.
    <register name="Debug Control and Status" short="dcsr" address="0x7b0">
        <field name="xdebugver" bits="31:30" access="R" reset="Preset">
          0: There is no external debug support.

          1: External debug support exists as it is described in this document.

	  Other values are reserved for future standards.
        </field>
        <field name="0" bits="29:16" access="R" reset="0" />
        <field name="ebreakm" bits="15" access="R/W" reset="0">
            When 1, {\tt ebreak} instructions in Machine Mode enter Halt Mode.
        </field>
        <field name="ebreakh" bits="14" access="R/W" reset="0">
            When 1, {\tt ebreak} instructions in Hypervisor Mode enter Halt Mode.
        </field>
        <field name="ebreaks" bits="13" access="R/W" reset="0">
            When 1, {\tt ebreak} instructions in Supervisor Mode enter Halt Mode.
        </field>
        <field name="ebreaku" bits="12" access="R/W" reset="0">
            When 1, {\tt ebreak} instructions in User/Application Mode enter
            Halt Mode.
        </field>
        <field name="hmexc" bits="11" access="R/W0" reset="0">
            Halt Mode exception bit. It is set when an exception occurs in Halt
            Mode.  It is cleared by writing 0.
        </field>
        <field name="stopcycle" bits="10" access="R/W" reset="1">
            Controls the behavior of any counters while the component is in
            Halt Mode. This includes the {\tt cycle} and {\tt instret} CSRs.
            When 1, counters are stopped when the component is in Halt Mode.
            Otherwise, the counters continue to run.

            An implementation may choose not to support writing to this bit.
            The debugger must read back the value it writes to check whether
            the feature is supported.
        </field>
        <field name="stoptime" bits="9" access="R/W" reset="0">
            Controls the behavior of any timers while the component is in Debug
            Mode.  This includes the {\tt time} and {tt timeh} CSRs.  When 1,
            timers are stopped when the component is in Halt Mode.  Otherwise,
            the timers continue to run.

            An implementation may choose not to support writing to this bit.
            The debugger must read back the value it writes to check whether
            the feature is supported.
        </field>
        <field name="cause" bits="8:6" access="R" reset="0">
            Explains why Halt Mode was entered.

            When there are multiple reasons to enter Halt Mode in a single
            cycle, the cause with the highest priority is the one written.

            1: A software breakpoint was hit. (priority 3)

            2: The Trigger Module caused a halt. (priority 4)

            3: The debug interrupt was asserted by the Debug Module. (priority 2)

            4: The hart single stepped because \Fstep was set. (priority 1)

            5: \Fhalt was set. (priority 0)

            Other values are reserved for future use.
        </field>
        <field name="0" bits="5:3" access="R" reset="0" />
        <field name="step" bits="2" access="R/W" reset="0">
            When set and not in Halt Mode, the hart will only execute a single
            instruction, and then enter Halt Mode. Interrupts are disabled
            when this bit is set.
        </field>
        <field name="prv" bits="1:0" access="R/W" reset="0">
            Contains the privilege level the hart was operating in when Debug
            Mode was entered. The encoding is describe in Table
            \ref{tab:privlevel}.  A debugger can change this value to change
            the hart's privilege level when exiting Halt Mode.

            Not all privilege levels are supported on all harts. If the
            encoding written is not supported or the debugger is not allowed to
            change to it, the hart may change to any supported privilege level.
	</field>
    </register>

    <register name="Debug PC" short="dpc" address="0x7b1">
        This register is only accessible in Halt Mode. Then it contains the
        address of the next instruction to be executed when resuming. It's
        writable so that the debugger can cause execution to continue somewhere
        else.

        <field name="dpc" bits="XLEN-1:0" access="R/W" reset="0" />
    </register>

    <register name="Debug Scratch Register 0" short="dscratch0" address="0x7b2">
        Optional scratch register that can be used by implementations that need
        it. A debugger must not write to this register.
    </register>

    <register name="Debug Scratch Register 1" short="dscratch1" address="0x7b3">
        Optional scratch register that can be used by implementations that need
        it. A debugger must not write to this register.
    </register>

    <register name="Privilege Level" short="priv" address="virtual">
        Users of the debugger shouldn't need to know about the debug registers,
        but might want to inspect and change the privilege level that the hart
        was running in when the hart halted. To facilitate this, debuggers
        should expose the privilege level in this virtual register. (A virtual
        register is one that doesn't exist directly in the hardware, but that
        the debugger exposes as if it does.)

        \begin{table}
        \centering
        \caption{Privilege Level Encoding}
        \label{tab:privlevel}
        \begin{tabular}{|r|l|}
        \hline
        Encoding &amp; Privilege Level \\
        \hline
        0 &amp; User/Application \\
        1 &amp; Supervisor \\
        2 &amp; Hypervisor \\
        3 &amp; Machine \\
        \hline
        \end{tabular}
        \end{table}

        <field name="prv" bits="1:0" access="R/W" reset="0">
            Contains the privilege level the hart was operating in when Debug
            Mode was entered. The encoding is describe in Table
            \ref{tab:privlevel}. A user can write this value to change the
            hart's privilege level when exiting Halt Mode.
        </field>
    </register>
</registers>
