<registers name="Debug Module Debug Bus Registers">

    <!-- =============== halt/reset/select hart  =============== -->

    <register name="Control" short="dmcontrol" address="0x00">
        The address of this register will not change in the future, because it
        contains \Fversion.  It has changed from version 0.11 of this spec.

        <field name="halt" bits="31" access="R/W" reset="0">
            Halt signal for the hart selected by \Fhartid.  Writes apply to the
            new value of \Fhartid.
        </field>
        <field name="reset" bits="30" access="R/W" reset="0">
            This bit controls the reset signal from the DM to the rest of the
            system. To perform a reset the debugger writes 1, and then writes 0
            to deassert the reset.
        </field>
        <field name="dmactive" bits="29" access="R/W" reset="0">
            This bit indicates whether the Debug Module is active. When 0,
	    all DM registers and state keep their reset values.
	    When 1, DM registers and state are updated as described in the rest
	    of the Debug Module description. Implementations may use this bit
	    as needed to aid debugging, for example by preventing the Debug Module
	    from being power gated while debugging is active.
	    DM registers should not be otherwise reset after power-on,
	    neither by the platform's system reset or Debug Transport
	    reset signals.
        </field>
        <field name="0" bits="28:26" access="R" reset="0" />
        <field name="hartid" bits="25:16" access="R/W" reset="0">
            The ID of the hart to select.
        </field>
        <field name="0" bits="15:9" access="R" reset="0" />
        <field name="haltsum" bits="8" access="R" reset="Preset">
            1 when \Rhaltsum is implemented.
        </field>
        <field name="authenticated" bits="7" access="R" reset="Preset">
            0 when authentication is required before using the DM.  1 when the
            authentication check has passed. On components that don't implement
            authentication, this bit must be preset as 1.
        </field>
        <field name="authbusy" bits="6" reset="0" access="R">
            While 1, writes to \Rauthdatazero and \Rauthdataone may be ignored
            or may result in authentication failing.  Authentication mechanisms
            that are slow (or intentionally delayed) must set this bit when
            they're not ready to process another write.
        </field>
        <field name="authtype" bits="5:4" reset="Preset" access="R">
          Defines the kind of authentication required to use this DM.

	  0: No authentication is required.

          1: A password is required.

	  2: A challenge-response mechanism is in place.

	  3: Reserved for future use.
        </field>
        <field name="version" bits="3:0" reset="1" access="R">
            0: There is no Debug Module present.

            1: There is a Debug Module and it conforms to version 0.12 of this
            specification.

            Other values are reserved for future use.
        </field>
    </register>

    <register name="Hart Info" short="hartinfo" address="0x01">
        This register contains information describing the hart selected by
        \Fhartid.

        TODO: remove?

        <field name="0" bits="31:0" access="R" reset="0" />
    </register>

    <register name="Halt Summary" short="haltsum" address="0x02">
        If implemented, this register contains a summary of which harts are
        halted.

        Each 30 bit contains the logical OR of 32 halt bits. When there are a
        large number of harts in the system, the debugger can first read this
        register, and then read from the halt region (TODO) to determine which
        hart is the one that is halted.

        <field name="halt31:0" bits="0" access="R" reset="0" />
        <field name="halt63:32" bits="1" access="R" reset="0" />
        <field name="halt95:64" bits="2" access="R" reset="0" />
        <field name="halt127:96" bits="3" access="R" reset="0" />
        <field name="halt159:128" bits="4" access="R" reset="0" />
        <field name="halt191:160" bits="5" access="R" reset="0" />
        <field name="halt223:192" bits="6" access="R" reset="0" />
        <field name="halt255:224" bits="7" access="R" reset="0" />
        <field name="halt287:256" bits="8" access="R" reset="0" />
        <field name="halt319:288" bits="9" access="R" reset="0" />
        <field name="halt351:320" bits="10" access="R" reset="0" />
        <field name="halt383:352" bits="11" access="R" reset="0" />
        <field name="halt415:384" bits="12" access="R" reset="0" />
        <field name="halt447:416" bits="13" access="R" reset="0" />
        <field name="halt479:448" bits="14" access="R" reset="0" />
        <field name="halt511:480" bits="15" access="R" reset="0" />
        <field name="halt543:512" bits="16" access="R" reset="0" />
        <field name="halt575:544" bits="17" access="R" reset="0" />
        <field name="halt607:576" bits="18" access="R" reset="0" />
        <field name="halt639:608" bits="19" access="R" reset="0" />
        <field name="halt671:640" bits="20" access="R" reset="0" />
        <field name="halt703:672" bits="21" access="R" reset="0" />
        <field name="halt735:704" bits="22" access="R" reset="0" />
        <field name="halt767:736" bits="23" access="R" reset="0" />
        <field name="halt799:768" bits="24" access="R" reset="0" />
        <field name="halt831:800" bits="25" access="R" reset="0" />
        <field name="halt863:832" bits="26" access="R" reset="0" />
        <field name="halt895:864" bits="27" access="R" reset="0" />
        <field name="halt927:896" bits="28" access="R" reset="0" />
        <field name="halt959:928" bits="29" access="R" reset="0" />
        <field name="halt991:960" bits="30" access="R" reset="0" />
        <field name="halt1023:992" bits="31" access="R" reset="0" />
    </register>

    <!-- =============== system bus mastering =============== -->

    <register name="System Bus Access Control" short="sbcs" address="0x03">
        <field name="0" bits="31:20" access="R" reset="0" />
        <field name="sbaccess" bits="19:17" access="R/W" reset="2">
            Select the access size to use for system bus accesses triggered by
            writes to the {\tt sbaddress} registers or \Rsbdatazero.

	    0: 8-bit

            1: 16-bit

	    2: 32-bit

	    3: 64-bit

	    4: 128-bit

            If an unsupported system bus access size is written here,
	    the DM may not
            perform the access, or may perform the access with any access size
        </field>
        <field name="sbautoincrement" bits="16" access="R/W" reset="0">
          When 1, the internal address value (used by the system bus master)
	  is
          incremented by the access size (in bytes) selected in \Fsbaccess after
          every system bus access.
        </field>
        <field name="sbautoread" bits="15" access="R/W" reset="0">
          When 1, every write to \Rsbaddresszero automatically triggers a
	  system bus
          read at the new address.
        </field>
        <field name="sberror" bits="14:12" access="R/W0" reset="0">
          When the debug module's system bus
	  master causes a bus error, this field gets set.
          It remains set until 0 is written to any bit in this field. Until
          that happens, the system bus master is busy and no more accesses can be
            initiated by the debug module.

            0: There was no bus error.

            1: There was a timeout.

            2: A bad address was accessed.

            3: There was some other error (eg. alignment).

            4: The system bus master was busy when a one of the $|sbaddress|$ or
            $|sbdata|$ registers was written.
        </field>
        <field name="sbasize" bits="11:5" access="R" reset="Preset">
            Width of system bus addresses in bits. (0 indicates there is no bus
            access support.)
        </field>
        <field name="sbaccess128" bits="4" access="R" reset="Preset">
            1 when 128-bit system bus accesses are supported.
        </field>
        <field name="sbaccess64" bits="3" access="R" reset="Preset">
            1 when 64-bit system bus accesses are supported.
        </field>
        <field name="sbaccess32" bits="2" access="R" reset="Preset">
            1 when 32-bit system bus accesses are supported.
        </field>
        <field name="sbaccess16" bits="1" access="R" reset="Preset">
            1 when 16-bit system bus accesses are supported.
        </field>
        <field name="sbaccess8" bits="0" access="R" reset="Preset">
            1 when 8-bit system bus accesses are supported.
        </field>
    </register>

    <register name="System Bus Address 31:0" short="sbaddress0" address="0x04">
        If \Fsbasize is 0, then this register is not present.

        When the syste bus master is busy,
	writes to this register will return error
        and \Fsberror is set.

        If \Fsberror is 0 and \Fsbautoread is set then the system bus
	master will start
        to read after updating the address from \Faddress. The access size is
        controlled by \Fsbaccess in \Rdmcontrol.

        <field name="address" bits="31:0" access="R/W" reset="0">
            Accesses bits 31:0 of the internal address.
        </field>
    </register>

    <register name="System Bus Address 63:32" short="sbaddress1" address="0x05">
        <field name="address" bits="31:0" access="R/W" reset="0">
            Accesses bits 63:32 of the internal address (if the system address
            bus is that wide).
        </field>
    </register>

    <register name="System Bus Address 91:61" short="sbaddress2" address="0x06">
        If \Fsbasize is less than 65, then this register is not present.

        <field name="busy" bits="31" access="R" reset="0">
            The same as \Fbusy in \Rsbaddresszero.
        </field>
        <field name="address" bits="30:0" access="R/W" reset="0">
            Accesses bits 91:61 of the internal address (if the system address
            bus is that wide).
        </field>
    </register>

    <register name="System Bus Data 31:0" short="sbdata0" address="0x07">
        If all of the {\tt sbaccess} bits in \Rsbcs are 0, then this register
        is not present.

        If \Fsberror isn't 0 then accesses return error, and don't do anything
        else.

        If the bus master is busy then accesses set \Fsberror, return error,
        and don't do anything else.

        Writes to this register:
        1. Update internal data.
        2. Start a bus write of the internal data to the internal address.

        Reads to this register:
        1. If bits 31:0 of the internal data register haven't been updated
        since the last time this register was read, then set \Fsberror, return
        error, and don't do anything else.
        2. "Return" the data.
        3. If \Fsbautoread is set, start another system bus read.

        <field name="data" bits="31:0" access="R/W" reset="0">
            Accesses bits 31:0 of the internal data.
        </field>
    </register>

    <register name="System Bus Data 63:32" short="sbdata1" address="0x08">
        If \Fsbaccesssixtyfour and \Fsbaccessonetwentyeight are 0, then this
        register is not present.

        <field name="data" bits="31:0" access="R/W" reset="0">
            Accesses bits 63:32 of the internal data (if the system bus is
            that wide).
        </field>
    </register>

    <register name="System Bus Data 95:64" short="sbdata2" address="0x09">
        This register only exists if \Fsbaccessonetwentyeight is 1.

        <field name="data" bits="31:0" access="R/W" reset="0">
            Accesses bits 95:64 of the internal data (if the system bus is
            that wide).
        </field>
    </register>

    <register name="System Bus Data 127:96" short="sbdata3" address="0x0a">
        This register only exists if \Fsbaccessonetwentyeight is 1.

        <field name="data" bits="31:0" access="R/W" reset="0">
            Accesses bits 127:96 of the internal data (if the system bus is
            that wide).
        </field>
    </register>

    <!-- =============== abstract commands =============== -->

    <register name="Abstract Control" short="abstractcs" address="0x0b">
        <field name="0" bits="31:16" access="R" reset="0" />
        <field name="autoexec7" bits="15" access="R/W" reset="0" />
        <field name="autoexec6" bits="14" access="R/W" reset="0" />
        <field name="autoexec5" bits="13" access="R/W" reset="0" />
        <field name="autoexec4" bits="12" access="R/W" reset="0" />
        <field name="autoexec3" bits="11" access="R/W" reset="0" />
        <field name="autoexec2" bits="10" access="R/W" reset="0" />
        <field name="autoexec1" bits="9" access="R/W" reset="0" />
        <field name="autoexec0" bits="8" access="R/W" reset="0">
            When 1, accesses to \Ribufzero cause the command in \Rcommand to be
            executed again.
        </field>
        <field name="cmderr" bits="7:5" access="R/W0" reset="0">
            Gets set if an abstract command fails. No abstract command is
            started until the value is reset to 0.

            0: No error.

            1: An abstract command was executing while \Rcommand or one of the
            {\tt data} registers was accessed.

            2: The requested command is not supported. A command that is not
            supported while the hart is running may be supported when it is
            halted.

            7: The command failed for another reason.
        </field>
        <field name="busy" bits="4" access="R" reset="0">
            1: An abstract command is currently being executed.
        </field>
        <field name="datacount" bits="3:0" access="R" reset="Preset">
            Number of {\tt data} registers that are implemented as part of the
            abstract command interface. If it's 0 then no abstract interface is
            implemented at all.
        </field>
    </register>

    <register name="Abstract Command" short="command" address="0x0c">
        Writes to this register cause the corresponding abstract command to be
        executed.

        Writing while an abstract command is executing causes \Fcmderr to be set.

        If \Fcmderr is non-zero, writes to this register are ignored.

        <field name="command" bits="31:0" access="W" reset="0" />
    </register>

    <register name="Abstract Data 0" short="data0" address="0x0d">
        Basic read/write registers that may be read or changed by abstract
        commands.

        Accessing them while an abstract command is executing causes \Fcmderr
        to be set.

        TODO: For now these register addresses conflict.

        <field name="data" bits="31:0" access="R/W" reset="0" />
    </register>

    <register name="Abstract Data 1" short="data1" address="0x0e" />
    <register name="Abstract Data 2" short="data2" address="0x0f" />
    <register name="Abstract Data 3" short="data3" address="0x10" />
    <register name="Abstract Data 4" short="data4" address="0x11" />
    <register name="Abstract Data 5" short="data5" address="0x12" />
    <register name="Abstract Data 6" short="data6" address="0x13" />
    <register name="Abstract Data 7" short="data7" address="0x14" />

    <!-- =============== instruction supply =============== -->

    <register name="Access Status and Control" short="accesscs" address="0x15">
        <field name="0" bits="31:4" access="R" reset="0" />
        <field name="progsize" bits="3:0" access="R" reset="Preset">
            Size of the Program Buffer, in 32-bit words.

            A debugger must not access any Instruction Buffer locations that
            fall outside the range specified here.
        </field>
    </register>

    <register name="Program Buffer 0" short="ibuf0" address="0x18">
        The ibuf registers provide read/write access to the optional
        instruction buffer.

        If \Fautoexeczero is set, then after this register is accessed the
        command in \Rcommand is executed again.

        <field name="data" bits="31:0" access="R/W" reset="0" />
    </register>

    <register name="Program Buffer 1" short="ibuf1" address="0x19" />
    <register name="Program Buffer 2" short="ibuf2" address="0x1a" />
    <register name="Program Buffer 3" short="ibuf3" address="0x1b" />
    <register name="Program Buffer 4" short="ibuf4" address="0x1c" />
    <register name="Program Buffer 5" short="ibuf5" address="0x1d" />
    <register name="Program Buffer 6" short="ibuf6" address="0x1e" />
    <register name="Program Buffer 7" short="ibuf7" address="0x1f" />

    <!-- =============== authentication =============== -->

    <register name="Authentication Data 0" short="authdata0" address="0x20">
        If \Fauthtype is 0, this register is not present.

        If \Fauthtype is 1, writing a correct password to this register and
        \Rauthdataone enables the DM. The DM is disabled either by writing an
        invalid password, or by resetting it. 0 must not be used as a password.
        If an implementation wants to use a well-known password, the
        recommended value is 0x5551212. Reading from the register returns 0.

        If \Fauthtype is 2, things are a bit more complicated. Reading from the
        register pair reads the last challenge generated. Writing the correct
        response to \Rauthdataone and \Rauthdatazero enables the DM. The DM
        is disabled either by writing an incorrect response, or by resetting
        it.  Writing to \Rauthdatazero triggers validation, so if a 64-bit
        value is required then \Rauthdataone must be written first.  If the
        combined value in \Rauthdatazero and \Rauthdataone is not a valid
        response after writing \Rauthdatazero, then a new challenge must be
        generated.  Depending on the implementation, there may not be a valid
        challenge until the first write to this register.

        <field name="data" bits="31:0" access="R/W" reset="0" />
    </register>

    <register name="Authentication Data 1" short="authdata1" address="0x21">
        This register contains the upper 32 bits of a 64-bit password
        or challenge/response as described in \Rauthdatazero.

        <field name="data" bits="31:0" access="R/W" reset="0" />
    </register>

    <!-- =============== serial ports =============== -->

    <register name="Serial Data" short="serdata" address="0x22">
        If \Fserialcount is 0, this register is not present.

        This register provides access to the data queues of the serial port
        selected by \Fserial in \Rdmcontrol.

        A read from this register reads the oldest entry in the
        debugger-to-core queue, and removes that entry from the queue.  If the
        queue is empty, then the read fails.

        A write to this register adds the written data to the core-to-debugger
        queue. If that queue is already full or its overflow bit is set, then
        the write fails and the overflow bit becomes set.

        <field name="data" bits="31:0" access="R/W" reset="0" />
    </register>

    <register name="Serial Status" short="serstatus" address="0x23">
        If \Fserialcount is 0, this register is not present.

        <field name="serialcount" bits="31:28" access="R" reset="Preset">
            Number of supported serial ports.
        </field>
        <field name="0" bits="27:19" access="R" reset="0" />
        <field name="serial" bits="18:16" access="R/W" reset="0">
            Select which serial port is accessed by \Rserdata.
        </field>
        <field name="valid7" bits="15" access="R" reset="0" />
        <field name="full/overflow7" bits="14" access="R/W0" reset="0" />
        <field name="valid6" bits="13" access="R" reset="0" />
        <field name="full/overflow6" bits="12" access="R/W0" reset="0" />
        <field name="valid5" bits="11" access="R" reset="0" />
        <field name="full/overflow5" bits="10" access="R/W0" reset="0" />
        <field name="valid4" bits="9" access="R" reset="0" />
        <field name="full/overflow4" bits="8" access="R/W0" reset="0" />
        <field name="valid3" bits="7" access="R" reset="0" />
        <field name="full/overflow3" bits="6" access="R/W0" reset="0" />
        <field name="valid2" bits="5" access="R" reset="0" />
        <field name="full/overflow2" bits="4" access="R/W0" reset="0" />
        <field name="valid1" bits="3" access="R" reset="0" />
        <field name="full/overflow1" bits="2" access="R/W0" reset="0" />
        <field name="valid0" bits="1" access="R" reset="0">
            1 when the core-to-debugger queue for serial port 0 is not empty.
        </field>
        <field name="full/overflow0" bits="0" access="R/W0" reset="0">
            1 when the debugger-to-core queue for serial port 0 is either full,
            or has overflowed. Overflow state is sticky, and can be reset by
            writing 0 to this bit.
        </field>
    </register>

</registers>
