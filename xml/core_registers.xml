<registers name="Core Debug Registers" prefix="CSR_">
    These registers are only accessible from Debug Mode.
    <register name="Debug Control and Status" short="dcsr" address="0x7b0">
        <field name="xdebugver" bits="31:28" access="R" reset="Preset">
          0: There is no external debug support.

          4: External debug support exists as it is described in this document.
        </field>
        <field name="0" bits="27:16" access="R" reset="0" />
        <field name="ebreakm" bits="15" access="R/W" reset="0">
            When 1, {\tt ebreak} instructions in Machine Mode enter Debug Mode.
        </field>
        <field name="ebreakh" bits="14" access="R/W" reset="0">
            When 1, {\tt ebreak} instructions in Hypervisor Mode enter Debug Mode.
        </field>
        <field name="ebreaks" bits="13" access="R/W" reset="0">
            When 1, {\tt ebreak} instructions in Supervisor Mode enter Debug Mode.
        </field>
        <field name="ebreaku" bits="12" access="R/W" reset="0">
            When 1, {\tt ebreak} instructions in User/Application Mode enter
            Debug Mode.
        </field>
        <field name="0" bits="11" access="R" reset="0" />
        <field name="stopcount" bits="10" access="R/W" reset="Preset">

            0: Increment counters as usual.

            1: Don't increment any counters while in Debug Mode.  This includes
            the {\tt cycle} and {\tt instret} CSRs. This is preferred for most
            debugging scenarios.

            An implementation may choose not to support writing to this bit.
            The debugger must read back the value it writes to check whether
            the feature is supported.

        </field>
        <field name="stoptime" bits="9" access="R/W" reset="Preset">
            0: Increment timers as usual.

            1: Don't increment any hart-local timers while in Debug Mode.

            An implementation may choose not to support writing to this bit.
            The debugger must read back the value it writes to check whether
            the feature is supported.

        </field>
        <field name="cause" bits="8:6" access="R" reset="0">
            Explains why Debug Mode was entered.

            When there are multiple reasons to enter Debug Mode in a single
            cycle, the cause with the highest priority is the one written.

            1: An {\tt ebreak} instruction was executed. (priority 3)

            2: The Trigger Module caused a halt. (priority 4)

            3: \Fhaltreq was set. (priority 2)

            4: The hart single stepped because \Fstep was set. (priority 1)

            Other values are reserved for future use.
        </field>
        <field name="0" bits="5:3" access="R" reset="0" />
        <field name="step" bits="2" access="R/W" reset="0">
            When set and not in Debug Mode, the hart will only execute a single
            instruction and then enter Debug Mode.
            Interrupts are disabled when this bit is set.
            If the instruction does not complete due to an exception,
            the hart will immediately enter Debug Mode before executing
            the trap handler, with appropriate exception registers set.
        </field>
        <field name="prv" bits="1:0" access="R/W" reset="0">
            Contains the privilege level the hart was operating in when Debug
            Mode was entered. The encoding is described in Table
            \ref{tab:privlevel}.  A debugger can change this value to change
            the hart's privilege level when exiting Debug Mode.

            Not all privilege levels are supported on all harts. If the
            encoding written is not supported or the debugger is not allowed to
            change to it, the hart may change to any supported privilege level.
	</field>
    </register>

    <register name="Debug PC" short="dpc" address="0x7b1">
        Upon entry to debug mode, \Rdpc is written with the
        virtual address of the instruction that encountered the exception.

        When resuming, the hart's PC is updated to the virtual address stored in
        \Rdpc. A debugger may write \Rdpc to change where the hart resumes.
        <field name="dpc" bits="XLEN-1:0" access="R/W" reset="0" />
    </register>

    <register name="Debug Scratch Register 0" short="dscratch0" address="0x7b2">
        Optional scratch register that can be used by implementations that need
        it. A debugger must not write to this register unless \Rhartinfo
        explicitly mentions it (the Debug Module may use this register internally).
    </register>

    <register name="Debug Scratch Register 1" short="dscratch1" address="0x7b3">
        Optional scratch register that can be used by implementations that need
        it. A debugger must not write to this register unless \Rhartinfo
        explicitly mentions it (the Debug Module may use this register internally).
    </register>
</registers>
