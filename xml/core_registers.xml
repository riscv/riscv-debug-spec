<registers name="Core Debug Registers" prefix="CSR_">
    These registers are only accessible from Debug Mode.

    <register name="Debug Control and Status" short="dcsr" address="0x7b0">
        Upon entry into Debug Mode, \FcsrDcsrV and \FcsrDcsrPrv are updated
        with the privilege level the hart was previously in, and \FcsrDcsrCause
        is updated with the reason for Debug Mode entry.  Other than these
        fields and \FcsrDcsrNmip, the other fields of \RcsrDcsr are only
        writable by the external debugger.

        \begin{steps}{Table~\ref{tab:dcsrcausepriority} shows the priorities of
        reasons for entering Debug Mode.  Implementations should implement
        priorities as shown in the table. For compatibility with old versions of this spec, resethaltreq and haltreq are
        allowed to be at different positions than shown as long as:}
        \item resethaltreq is higher priority than haltreq
        \item the relative order of the other four causes is maintained
        \end{steps}

        \begin{table}[H]
        \centering
        \caption{Priority of reasons for entering Debug Mode from highest to lowest.}
        \label{tab:dcsrcausepriority}
        \begin{tabular}{|c|c|}
        \hline
        \FcsrDcsrCause encoding &amp; Cause \\
        \hline
        5 &amp; resethaltreq \\
        \hline
        6 &amp; halt group \\
        \hline
        3 &amp; haltreq \\
        \hline
        2 &amp; trigger (See table~\ref{tab:priority} for detailed priority) \\
        \hline
        1 &amp; ebreak \\
        \hline
        4 &amp; step \\
        \hline
        \end{tabular}
        \end{table}

        \begin{commentary}
        Note that mcontrol/mcontrol6 triggers with timing=after are considered
        to be high priority causes on the subsequent instruction.  Therefore,
        an execute trigger with timing=after on an ebreak instruction is lower
        priority than the ebreak itself because the trigger will fire after the
        ebreak instruction.  For the same reason, if a single instruction is
        stepped with both icount and \FcsrDcsrStep then the \FcsrDcsrStep has
        priority.  See table~\ref{tab:priority} for the relative priorities of
        triggers with respect to the ebreak instruction.

        Most multi-hart implementations will probably hardwire \FcsrDcsrStoptime
        to 0, as the implementation can get complicated and the benefit is
        small.
        \end{commentary}

        <field name="debugver" bits="31:28" access="R" reset="Preset">
            <value v="0" name="none">
            There is no debug support.
            </value>

            <value v="4" name="1.0">
            Debug support exists as it is described in this document.
            </value>

            <value v="15" name="custom">
            There is debug support, but it does not conform to any
            available version of this spec.
            </value>
        </field>
        <field name="0" bits="27:18" access="R" reset="0" />
        <field name="ebreakvs" bits="17" access="WARL" reset="0">
            <value v="0" name="exception">
            {\tt ebreak} instructions in VS-mode behave as described in the
            Privileged Spec.
            </value>

            <value v="1" name="debug mode">
            {\tt ebreak} instructions in VS-mode enter Debug Mode.
            </value>

            This bit is hardwired to 0 if the hart does not support virtualization mode.
        </field>
        <field name="ebreakvu" bits="16" access="WARL" reset="0">
            <value v="0" name="exception">
            {\tt ebreak} instructions in VU-mode behave as described in the
            Privileged Spec.
            </value>

            <value v="1" name="debug mode">
            {\tt ebreak} instructions in VU-mode enter Debug Mode.
            </value>

            This bit is hardwired to 0 if the hart does not support virtualization mode.
        </field>
        <field name="ebreakm" bits="15" access="R/W" reset="0">
            <value v="0" name="exception">
            {\tt ebreak} instructions in M-mode behave as described in the
            Privileged Spec.
            </value>

            <value v="1" name="debug mode">
            {\tt ebreak} instructions in M-mode enter Debug Mode.
            </value>
        </field>
        <field name="0" bits="14" access="R" reset="0" />
        <field name="ebreaks" bits="13" access="WARL" reset="0">
            <value v="0" name="exception">
            {\tt ebreak} instructions in S-mode behave as described in the
            Privileged Spec.
            </value>

            <value v="1" name="debug mode">
            {\tt ebreak} instructions in S-mode enter Debug Mode.
            </value>

            This bit is hardwired to 0 if the hart does not support S-mode.
        </field>
        <field name="ebreaku" bits="12" access="WARL" reset="0">
            <value v="0" name="exception">
            {\tt ebreak} instructions in U-mode behave as described in the
            Privileged Spec.
            </value>

            <value v="1" name="debug mode">
            {\tt ebreak} instructions in U-mode enter Debug Mode.
            </value>

            This bit is hardwired to 0 if the hart does not support U-mode.
        </field>
        <field name="stepie" bits="11" access="WARL" reset="0">
            <value v="0" name="interrupts disabled">
            Interrupts (including NMI) are disabled during single stepping.
            </value>

            <value v="1" name="interrupts enabled">
            Interrupts (including NMI) are enabled during single stepping.
            </value>

            Implementations may hard wire this bit to 0.
            In that case interrupt behavior can be emulated by the debugger.

            The debugger must not change the value of this bit while the hart
            is running.
        </field>
        <field name="stopcount" bits="10" access="WARL" reset="Preset">
            <value v="0" name="normal">
            Increment counters as usual.
            </value>

            <value v="1" name="freeze">
            Don't increment any hart-local counters while in Debug Mode or
            on {\tt ebreak} instructions that cause entry into Debug Mode.
            These counters include the {\tt instret} CSR. On single-hart cores
            {\tt cycle} should be stopped, but on multi-hart cores it must keep
            incrementing.
            </value>

            An implementation may hardwire this bit to 0 or 1.
        </field>
        <field name="stoptime" bits="9" access="WARL" reset="Preset">
            <value v="0" name="normal">
            \Rtime continues to reflect \Rmtime.
            </value>

            <value v="1" name="freeze">
            \Rtime is frozen at the time that Debug Mode was entered. When
            leaving Debug Mode, \Rtime will reflect the latest
            value of \Rmtime again.

            While all harts have \FcsrDcsrStoptime=1 and are in Debug Mode,
            \Rmtime is allowed to stop incrementing.
            </value>

            An implementation may hardwire this bit to 0 or 1.
        </field>
        <field name="cause" bits="8:6" access="R" reset="0">
            Explains why Debug Mode was entered.

            When there are multiple reasons to enter Debug Mode in a single
            cycle, hardware should set \FcsrDcsrCause to the cause with the highest
            priority.  See table~\ref{tab:dcsrcausepriority} for priorities.

            <value v="1" name="ebreak">
            An {\tt ebreak} instruction was executed.
            </value>

            <value v="2" name="trigger">
            A Trigger Module trigger fired with action=1.
            </value>

            <value v="3" name="haltreq">
            The debugger requested entry to Debug Mode using \FdmDmcontrolHaltreq.
            </value>

            <value v="4" name="step">
            The hart single stepped because \FcsrDcsrStep was set.
            </value>

            <value v="5" name="resethaltreq">
            The hart halted directly out of reset due to \Fresethaltreq. It
            is also acceptable to report 3 when this happens.
            </value>

            <value v="6" name="group">
            The hart halted because it's part of a halt group.
            Harts may report 3 for this cause instead.
            </value>

            Other values are reserved for future use.
        </field>
        <field name="v" bits="5" access="WARL" reset="0">
          Extends the prv field with the virtualization mode the hart was operating
          in when Debug Mode was entered. The encoding is described in Table
          \ref{tab:privmode}.
          A debugger can change this value to change the hart's virtualization mode
          when exiting Debug Mode.
          This bit is hardwired to 0 on harts that do not support virtualization mode.
        </field>
        <field name="mprven" bits="4" access="WARL" reset="Preset">
            <value v="0" name="disabled">
            \FcsrMstatusMprv in \Rmstatus is ignored in Debug Mode.
            </value>

            <value v="1" name="enabled">
            \FcsrMstatusMprv in \Rmstatus takes effect in Debug Mode.
            </value>

            Implementing this bit is optional. It may be tied to either 0 or 1.
	</field>
        <field name="nmip" bits="3" access="R" reset="0">
            When set, there is a Non-Maskable-Interrupt (NMI) pending for the hart.

            Since an NMI can indicate a hardware error condition,
            reliable debugging may no longer be possible once this bit becomes set.
            This is implementation-dependent.
        </field>
        <field name="step" bits="2" access="R/W" reset="0">
            When set and not in Debug Mode, the hart will only execute a single
            instruction and then enter Debug Mode. See Section~\ref{stepBit}
            for details.

            The debugger must not change the value of this bit while the hart
            is running.
        </field>
        <field name="prv" bits="1:0" access="WARL" reset="3">
            Contains the privilege mode the hart was operating in when Debug
            Mode was entered. The encoding is described in Table
            \ref{tab:privmode}.  A debugger can change this value to change
            the hart's privilege mode when exiting Debug Mode.

            Not all privilege modes are supported on all harts. If the
            encoding written is not supported or the debugger is not allowed to
            change to it, the hart may change to any supported privilege mode.
        </field>
    </register>

    <register name="Debug PC" short="dpc" address="0x7b1">
        Upon entry to debug mode, \RcsrDpc is updated with the virtual address of
        the next instruction to be executed. The behavior is described in more
        detail in Table~\ref{tab:dpc}.

        \begin{table}[H]
        \centering
        \caption{Virtual address in DPC upon Debug Mode Entry}
        \label{tab:dpc}
        \begin{tabular}{|l|L|}
        \hline
        Cause &amp; Virtual Address in DPC \\
        \hline
        {\tt ebreak} &amp; Address of the {\tt ebreak} instruction \\
        \hline
        single step &amp; Address of the instruction that would be executed
        next if no debugging was going on. Ie. $\Rpc+4$ for 32-bit instructions
        that don't change program flow, the destination PC on taken
        jumps/branches, etc. \\
        \hline
        trigger module &amp; The address of the next instruction to be
        executed at the time that debug mode was entered. If the trigger is
        \RcsrMcontrol or \RcsrMcontrolSix and \FcsrMcontrolTiming is 0, this
        corresponds to the address of the instruction which caused the trigger
        to fire. \\
        \hline
        halt request &amp; Address of the next instruction to be
        executed at the time that debug mode was entered \\
        \hline
        \end{tabular}
        \end{table}

        When resuming, the hart's PC is updated to the virtual address stored in
        \RcsrDpc. A debugger may write \RcsrDpc to change where the hart resumes.
        <field name="dpc" bits="DXLEN-1:0" access="R/W" reset="0" />
    </register>

    <register name="Debug Scratch Register 0" short="dscratch0" address="0x7b2">
        Optional scratch register that can be used by implementations that need
        it. A debugger must not write to this register unless \RdmHartinfo
        explicitly mentions it (the Debug Module may use this register internally).
    </register>

    <register name="Debug Scratch Register 1" short="dscratch1" address="0x7b3">
        Optional scratch register that can be used by implementations that need
        it. A debugger must not write to this register unless \RdmHartinfo
        explicitly mentions it (the Debug Module may use this register internally).
    </register>
</registers>
