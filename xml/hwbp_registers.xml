<registers name="Trigger Registers" prefix="CSR_" label="trigger">
    The trigger registers, except \RcsrScontext and \RcsrHcontext, are only accessible in machine
    and Debug Mode to prevent untrusted user code from causing entry into Debug
    Mode without the OS's permission.

    In this section XLEN means MXLEN when in M-mode, and DXLEN when in Debug
    Mode. On systems where those values of XLEN can differ, this is handled
    as follows.
    Fields retain their values regardless of XLEN, which only affects where
    in the register these fields appear (e.g. \FcsrTdataOneType). Some fields
    are wider when XLEN is 64 than when it is 32 (e.g.
    \FcsrTextraThirtytwoSvalue). The high bits in such fields retain their
    value but are not readable when XLEN is 32.
    A modification of a register when XLEN is 32 clears any inaccessible bits
    in that register.

    <register name="Trigger Select" short="tselect" address="0x7a0">
        This register determines which trigger is accessible through the other
        trigger registers. It is optional if no triggers are implemented.  The
        set of accessible triggers must start at 0, and be contiguous.

        Writes of values greater than or equal to the number of supported
        triggers may result in a different value in this register than what was
        written. To verify that what they wrote is a valid index, debuggers can
        read back the value and check that \RcsrTselect holds what they wrote.

        Since triggers can be used both by Debug Mode and M-mode, the external
        debugger must restore this register if it modifies it.

        <field name="index" bits="XLEN-1:0" access="WARL" reset="0" />
    </register>

    <register name="Trigger Data 1" short="tdata1" address="0x7a1">
        This register is optional if no triggers are implemented.

        <field name="type" bits="XLEN-1:XLEN-4" access="WARL" reset="Preset">
            0: There is no trigger at this \RcsrTselect.

            1: The trigger is a legacy SiFive address match trigger. These
            should not be implemented and aren't further documented here.

            2: The trigger is an address/data match trigger. The remaining bits
            in this register act as described in \RcsrMcontrol.

            3: The trigger is an instruction count trigger. The remaining bits
            in this register act as described in \RcsrIcount.

            4: The trigger is an interrupt trigger. The remaining bits
            in this register act as described in \RcsrItrigger.

            5: The trigger is an exception trigger. The remaining bits
            in this register act as described in \RcsrEtrigger.

            6: The trigger is an address/data match trigger. The remaining bits
            in this register act as described in \RcsrMcontrolSix. This is similar
            to a type 2 trigger, but provides additional functionality and
            should be used instead of type 2 in newer implementations.

            7: The trigger is a trigger source external to the TM.  The
            remaining bits in this register act as described in \RcsrTmexttrigger.

            12--14: These trigger types are available for non-standard use.

            15: This trigger exists (so enumeration shouldn't terminate), but
            is not currently available.

            Other values are reserved for future use.
        </field>
        <field name="dmode" bits="XLEN-5" access="WARL" reset="0">
            If \FcsrTdataOneType is 0, then this bit is hard-wired to 0.

            0: Both Debug and M-mode can write the {\tt tdata} registers at the
            selected \RcsrTselect.

            1: Only Debug Mode can write the {\tt tdata} registers at the
            selected \RcsrTselect.  Writes from other modes are ignored.

            This bit is only writable from Debug Mode.
            In ordinary use, external debuggers will always set this bit when
            configuring a trigger.
            When clearing this bit, debuggers should also clear the action field
            (whose location depends on \FcsrTdataOneType).
        </field>
        <field name="data" bits="XLEN-6:0" access="WARL" reset="Preset">
            If \FcsrTdataOneType is 0, then this field is hard-wired to 0.

            Trigger-specific data.
        </field>
    </register>

    <register name="Trigger Data 2" short="tdata2" address="0x7a2">
        Trigger-specific data. It is optional if no implemented triggers use
        it.

        If XLEN is less than DXLEN, writes to this register are sign-extended.
        <field name="data" bits="XLEN-1:0" access="WARL" reset="Preset" />
    </register>

    <register name="Trigger Data 3" short="tdata3" address="0x7a3">
        Trigger-specific data. It is optional if no implemented triggers use
        it.

        If XLEN is less than DXLEN, writes to this register are sign-extended.
        <field name="data" bits="XLEN-1:0" access="WARL" reset="Preset" />
    </register>

    <register name="Trigger Info" short="tinfo" address="0x7a4">
        This register is optional if no triggers are implemented, or if \FcsrTdataOneType
        is not writable. In this case the debugger can read the only supported
        type from \RcsrTdataOne.

        <field name="0" bits="XLEN-1:16" access="R" reset="0" />
        <field name="info" bits="15:0" access="R" reset="Preset">
            One bit for each possible \FcsrTdataOneType enumerated in \RcsrTdataOne. Bit N
            corresponds to type N. If the bit is set, then that type is
            supported by the currently selected trigger.

            If the currently selected trigger doesn't exist, this field
            contains 1.
        </field>
    </register>

    <register name="Trigger Control" short="tcontrol" address="0x7a5">
        This optional register is only accessible in M-mode and Debug Mode and
        provides various control bits related to triggers.

        <field name="0" bits="XLEN-1:10" access="R" reset="0" />
        <field name="hcxe" bits="9" access="WARL" reset="0">
            \RcsrHcontext enable.

            0: \RcsrHcontext is set to 0 and writes are ignored.

            1: \RcsrHcontext may be written and read.
        </field>
        <field name="scxe" bits="8" access="WARL" reset="0">
            \RcsrScontext enable.

            0: \RcsrScontext is set to 0 and writes are ignored.

            1: \RcsrScontext may be written and read.

            Enabling \RcsrScontext can be a security risk in a
            virtualized system with a hypervisor that does not swap \RcsrScontext.
        </field>
        <field name="mpte" bits="7" access="WARL" reset="0">
            M-mode previous trigger enable field.

            \FcsrTcontrolMpte and \FcsrTcontrolMte provide one solution to a problem
            regarding triggers with action=0 firing in M-mode trap handlers. See
            Section~\ref{sec:mmtrigger} for more details.

            When a trap into M-mode is taken, \FcsrTcontrolMpte is set to the value of
            \FcsrTcontrolMte.
        </field>
        <field name="0" bits="6:4" access="R" reset="0" />
        <field name="mte" bits="3" access="WARL" reset="0">
            M-mode trigger enable field.

            0: Triggers with action=0 do not match/fire while the hart is in M-mode.

            1: Triggers do match/fire while the hart is in M-mode.

            When a trap into M-mode is taken, \FcsrTcontrolMte is set to 0. When {\tt
            mret} is executed, \FcsrTcontrolMte is set to the value of \FcsrTcontrolMpte.
        </field>
        <field name="0" bits="2:0" access="R" reset="0" />
    </register>

    <register name="Hypervisor Context" short="hcontext" address="0x6a8">
        This optional register is only accessible in S/HS-mode, M-mode and
        Debug Mode.

        If the H extension is not implemented then this register is not
        implemented, though the underlying state may be accessible via
        the optional \RcsrMcontext alias.

        <field name="hcontext" bits="XLEN-1:0" access="WARL" reset="0">
            Hypervisor mode software can write a context number to this register,
            which can be used to set triggers that only fire in that specific
            context.

            An implementation may tie any number of upper bits in this field to
            0. If the H extension is not supported, it's recommended to implement
            no more than 6 bits on RV32, and 13 on RV64.  If the H extension is
            supported, it's recommended to implement no more than 7 bits on RV32
            and 14 on RV64.
        </field>
    </register>

    <register name="Supervisor Context" short="scontext" address="0x5a8">
        This optional register is only accessible in S/HS-mode, VS-mode,
        M-mode and Debug Mode.

        <field name="data" bits="XLEN-1:0" access="WARL" reset="0">
            Supervisor mode software can write a context number to this
            register, which can be used to set triggers that only fire in that
            specific context.

            An implementation may tie any number of high bits in this field to
            0. It's recommended to implement no more than 16 bits on RV32, and
            34 on RV64.
        </field>
    </register>

    <register name="Machine Context" short="mcontext" address="0x7a8">
        This optional register is an alias for \RcsrHcontext and is only
        accessible in M-mode and Debug mode.
    </register>

    <register name="Machine Supervisor Context" short="mscontext" address="0x7aa">
        This optional register is an alias for \RcsrScontext included for
        backward compatibility (if desired).
    </register>

    <register name="Match Control" short="mcontrol" address="0x7a1">
        This register is accessible as \RcsrTdataOne when \FcsrTdataOneType is 2.

        Address and data trigger implementation are heavily dependent on how
        the processor core is implemented. To accommodate various
        implementations, execute, load, and store address/data triggers may fire at
        whatever point in time is most convenient for the implementation.
        The debugger may request specific timings as described in \FcsrMcontrolTiming.
        Table~\ref{tab:hwbp_timing} suggests timings for the best user experience.

        A chain of triggers that don't all have the same \FcsrMcontrolTiming
        value will never fire. That means to implement the suggestions in
        Table~\ref{tab:hwbp_timing}, both timings should be supported on load
        address triggers.

        This trigger type may be limited to address comparisons (\FcsrMcontrolSelect is
        always 0) only. If that is the case, then \RcsrTdataTwo must be able to
        hold all valid virtual addresses but it need not be capable of holding
        other values.

        \begin{steps}{If the A extension is supported, then trigger behavior is as follows
        for the load and store bits:}
        \item {\tt lr} instructions are loads
        \item successful {\tt sc} instructions are stores
        \item it is \unspecified\ whether failing {\tt sc} instructions are stores or not
        \item Each AMO instruction is a load for the read portion of the
        operation. The address is always available to trigger on, although
        the value loaded might not be, depending on the hardware
        implementation.
        \item Each AMO instruction is a store for the write portion of the
        operation. The address is always available to trigger on, although
        the value stored might not be, depending on the hardware
        implementation.
        \end{steps}

        If the destination register of any load or AMO is \Rzero then it is
        \unspecified\ whether a load trigger with \FcsrMcontrolSelect=1 will
        match.  Whether store triggers with \FcsrMcontrolSelect=1 match on
        AMOs is \unspecified.
        <field name="type" bits="XLEN-1:XLEN-4" access="R" reset="2" />
        <field name="dmode" bits="XLEN-5" access="WARL" reset="0" />
        <field name="maskmax" bits="XLEN-6:XLEN-11" access="R" reset="Preset">
            Specifies the largest naturally aligned powers-of-two (NAPOT) range
            supported by the hardware when \FcsrMcontrolMatch is 1. The value is the
            logarithm base 2 of the number of bytes in that range.
            A value of 0 indicates \FcsrMcontrolMatch 1 is not supported.
            A value of 63 corresponds to the maximum NAPOT range, which is
            $2^{63}$ bytes in size.
        </field>
        <field name="0" bits="XLEN-12:23" access="R" reset="0" />
        <field name="sizehi" bits="22:21" access="WARL" reset="0">
            This field only exists when XLEN is at least 64.
            It contains the 2 high bits of the access size. The low bits
            come from \FcsrMcontrolSizelo. See \FcsrMcontrolSizelo for how this
            is used.
        </field>
        <field name="hit" bits="20" access="WARL" reset="0">
            If this bit is implemented then it must become set when this
            trigger fires and may become set when this trigger matches.
            The trigger's user can set or clear it at any
            time. It is used to determine which
            trigger(s) matched.  If the bit is not implemented, it is always 0
            and writing it has no effect.
        </field>
        <field name="select" bits="19" access="WARL" reset="0">
            This bit determines the contents of the XLEN-bit compare values.

            0: There is at least one compare value and it contains the lowest
            virtual address of the access.
            It is recommended that there are additional compare values for
            the other accessed virtual addresses.
            (E.g. on a 32-bit read from 0x4000, the lowest address is 0x4000
            and the other addresses are 0x4001, 0x4002, and 0x4003.)

            1: There is exactly one compare value and it contains the data
            value loaded or stored, or the instruction executed.
            Any bits beyond the size of the data access will contain 0.
        </field>
        <field name="timing" bits="18" access="WARL" reset="0">
            0: The action for this trigger will be taken just before the
            instruction that triggered it is committed, but after all preceding
            instructions are committed. \Rmepc or \RcsrDpc (depending on
            \FcsrMcontrolAction) must be set to the virtual address of the
            instruction that matched.

            If this is combined with \FcsrMcontrolLoad and
            \FcsrMcontrolSelect=1 then a memory access will be
            performed (including any side effects of performing such an access) even
            though the load will not update its destination register. Debuggers
            should consider this when setting such breakpoints on, for example,
            memory-mapped I/O addresses.

            1: The action for this trigger will be taken after the instruction
            that triggered it is committed. It should be taken before the next
            instruction is committed, but it is better to implement triggers imprecisely
            than to not implement them at all.
            \Rmepc or \RcsrDpc (depending on \FcsrMcontrolAction) must be set to
            the virtual address of the next instruction that must be executed to
            preserve the program flow.

            Most hardware will only implement one timing or the other, possibly
            dependent on \FcsrMcontrolSelect, \FcsrMcontrolExecute,
            \FcsrMcontrolLoad, and \FcsrMcontrolStore. This bit
            primarily exists for the hardware to communicate to the debugger
            what will happen. Hardware may implement the bit fully writable, in
            which case the debugger has a little more control.

            Data load triggers with \FcsrMcontrolTiming of 0 will result in the same load
            happening again when the debugger lets the hart run. For data load
            triggers, debuggers must first attempt to set the breakpoint with
            \FcsrMcontrolTiming of 1.

            If a trigger with \FcsrMcontrolTiming of 0 matches, it is
            implementation-dependent whether that prevents a trigger with
            \FcsrMcontrolTiming of 1 matching as well.
        </field>
        <field name="sizelo" bits="17:16" access="WARL" reset="0">
            This field contains the 2 low bits of the access size. The high bits come
            from \FcsrMcontrolSizehi. The combined value is interpreted as follows:

            0: The trigger will attempt to match against an access of any size.
            The behavior is only well-defined if $|select|=0$, or if the access
            size is XLEN.

            1: The trigger will only match against 8-bit memory accesses.

            2: The trigger will only match against 16-bit memory accesses or
            execution of 16-bit instructions.

            3: The trigger will only match against 32-bit memory accesses or
            execution of 32-bit instructions.

            4: The trigger will only match against execution of 48-bit instructions.

            5: The trigger will only match against 64-bit memory accesses or
            execution of 64-bit instructions.

            6: The trigger will only match against execution of 80-bit instructions.

            7: The trigger will only match against execution of 96-bit instructions.

            8: The trigger will only match against execution of 112-bit instructions.

            9: The trigger will only match against 128-bit memory accesses or
            execution of 128-bit instructions.

            An implementation must support the value of 0, but all other values
            are optional. When an implementation supports address triggers
            (\FcsrMcontrolSelect=0), it is recommended that those triggers
            support every access size that the hart supports, as well as for
            every instruction size that the hart supports.

            Implementations such as RV32D or RV64V are able to perform loads
            and stores that are wider than XLEN. Custom extensions may also
            support instructions that are wider than XLEN. Because
            \RcsrTdataTwo is of size XLEN, there is a known limitation that
            data value triggers (\FcsrMcontrolSelect=1) can only be supported
            for access sizes up to XLEN bits.  When an implementation supports
            data value triggers (\FcsrMcontrolSelect=1), it is recommended
            that those triggers support every access size up to XLEN that the
            hart supports, as well as for every instruction length up to XLEN
            that the hart supports.
        </field>
        <field name="action" bits="15:12" access="WARL" reset="0">
            The action to take when the trigger fires. The values are explained
            in Table~\ref{tab:action}.
        </field>
        <field name="chain" bits="11" access="WARL" reset="0">
            0: When this trigger matches, the configured action is taken.

            1: While this trigger does not match, it prevents the trigger with
            the next index from matching.

            A trigger chain starts on the first trigger with $|chain|=1$ after
            a trigger with $|chain|=0$, or simply on the first trigger if that
            has $|chain|=1$. It ends on the first trigger after that which has
            $|chain|=0$. This final trigger is part of the chain. The action
            on all but the final trigger is ignored.  The action on that final
            trigger will be taken if and only if all the triggers in the chain
            match at the same time.

            Debuggers should not terminate a chain with a trigger with a
            different type. It is undefined when exactly such a chain fires.

            Because \FcsrMcontrolChain affects the next trigger, hardware must zero it in
            writes to \RcsrMcontrol that set \FcsrTdataOneDmode to 0 if the next trigger has
            \FcsrTdataOneDmode of 1.
            In addition hardware should ignore writes to \RcsrMcontrol that set
            \FcsrTdataOneDmode to 1 if the previous trigger has both \FcsrTdataOneDmode of 0 and
            \FcsrMcontrolChain of 1. Debuggers must avoid the latter case by checking
            \FcsrMcontrolChain on the previous trigger if they're writing \RcsrMcontrol.

            Implementations that wish to limit the maximum length of a trigger
            chain (eg. to meet timing requirements) may do so by zeroing
            \FcsrMcontrolChain in writes to \RcsrMcontrol that would make the chain too long.
        </field>
        <field name="match" bits="10:7" access="WARL" reset="0">
            0: Matches when any compare value equals \RcsrTdataTwo.

            1: Matches when the top $M$ bits of any compare value match the top
            $M$ bits of \RcsrTdataTwo.
            $M$ is $|XLEN|-1$ minus the index of the least-significant
            bit containing 0 in \RcsrTdataTwo. Debuggers should only write values
            to \RcsrTdataTwo such that $M + $\FcsrMcontrolMaskmax$ \geq |XLEN|$
            and $M\gt0$ , otherwise it's undefined on what conditions the
            trigger will match.

            2: Matches when any compare value is greater than (unsigned) or
            equal to \RcsrTdataTwo.

            3: Matches when any compare value is less than (unsigned)
            \RcsrTdataTwo.

            4: Matches when $\frac{|XLEN|}{2}-1$:$0$ of any compare value
            equals $\frac{|XLEN|}{2}-1$:$0$ of \RcsrTdataTwo after
            $\frac{|XLEN|}{2}-1$:$0$ of the compare value is ANDed with
            $|XLEN|-1$:$\frac{|XLEN|}{2}$ of \RcsrTdataTwo.

            5: Matches when $|XLEN|-1$:$\frac{|XLEN|}{2}$ of any compare
            value equals $\frac{|XLEN|}{2}-1$:$0$ of \RcsrTdataTwo after
            $|XLEN|-1$:$\frac{|XLEN|}{2}$ of the compare value is ANDed with
            $|XLEN|-1$:$\frac{|XLEN|}{2}$ of \RcsrTdataTwo.

            8: Matches when \FcsrMcontrolMatch$=0$ would not match.

            9: Matches when \FcsrMcontrolMatch$=1$ would not match.

            12: Matches when \FcsrMcontrolMatch$=4$ would not match.

            13: Matches when \FcsrMcontrolMatch$=5$ would not match.

            Other values are reserved for future use.

            All comparisons only look at the lower XLEN (in the current mode)
            bits of the compare values and of \RcsrTdataTwo.
            When \FcsrMcontrolSelect=1 and access size is N, this is further
            reduced, and comparisons only look at the lower N bits of the
            compare values and of \RcsrTdataTwo.
        </field>
        <field name="m" bits="6" access="WARL" reset="0">
            When set, enable this trigger in M-mode.
        </field>
        <field name="0" bits="5" access="R" reset="0" />
        <field name="s" bits="4" access="WARL" reset="0">
            When set, enable this trigger in S/HS-mode.
            This bit is hard-wired to 0 if the hart does not support
            S-mode.
        </field>
        <field name="u" bits="3" access="WARL" reset="0">
            When set, enable this trigger in U-mode.
            This bit is hard-wired to 0 if the hart does not support
            U-mode.
        </field>
        <field name="execute" bits="2" access="WARL" reset="0">
            When set, the trigger fires on the virtual address or opcode of an
            instruction that is executed.
        </field>
        <field name="store" bits="1" access="WARL" reset="0">
            When set, the trigger fires on the virtual address or data of any
            store.
        </field>
        <field name="load" bits="0" access="WARL" reset="0">
            When set, the trigger fires on the virtual address or data of any
            load.
        </field>
    </register>

    <register name="Match Control Type 6" short="mcontrol6" address="0x7a1">
        This register is accessible as \RcsrTdataOne when \FcsrTdataOneType is 6.

        This replaces mcontrol in newer implementations and serves to provide additional
        functionality.

        Address and data trigger implementation are heavily dependent on how
        the processor core is implemented. To accommodate various
        implementations, execute, load, and store address/data triggers may fire at
        whatever point in time is most convenient for the implementation.
        The debugger may request specific timings as described in \FcsrMcontrolSixTiming.
        Table~\ref{tab:hwbp_timing} suggests timings for the best user experience.

        \begin{table}[H]
        \centering
        \caption{Suggested Trigger Timings}
        \label{tab:hwbp_timing}
        \begin{tabular}{|r|l|}
        \hline
        Match Type                  &amp; Suggested Trigger Timing \\
        \hline
        Execute Address             &amp; Before \\
        Execute Instruction         &amp; Before \\
        Execute Address+Instruction &amp; Before \\
        Load Address                &amp; Before \\
        Load Data                   &amp; After \\
        Load Address+Data           &amp; After \\
        Store Address               &amp; Before \\
        Store Data                  &amp; Before \\
        Store Address+Data          &amp; Before \\
        \hline
        \end{tabular}
        \end{table}

        A chain of triggers that don't all have the same \FcsrMcontrolSixTiming
        value will never fire. That means to implement the suggestions in
        Table~\ref{tab:hwbp_timing}, both timings should be supported on load
        address triggers.

        This trigger type may be limited to address comparisons (\FcsrMcontrolSixSelect is
        always 0) only. If that is the case, then \RcsrTdataTwo must be able to
        hold all valid virtual addresses but it need not be capable of holding
        other values.

        \begin{steps}{In implementations that support \FcsrMcontrolSixMatch mode 1 (NAPOT), not all
        NAPOT ranges may be supported.  All NAPOT ranges between $2^{1}$ and $2^{maskmax6}$
        are supported where maskmax6 $\geq$ 1.  The value of maskmax6 can be determined
        by the debugger via the following sequence:}
        \item Set \FcsrMcontrolSixMatch=1.
        \item Read \FcsrMcontrolSixMatch. If it is not 1 then NAPOT matching is not supported.
        \item Write all ones to \RcsrTdataTwo.
        \item Read \RcsrTdataTwo. The value of maskmax6 is the index of the most significant 0 bit plus 1.
        \end{steps}

        \begin{steps}{If the A extension is supported, then trigger behavior is as follows
        for the load and store bits:}
        \item {\tt lr} instructions are loads
        \item successful {\tt sc} instructions are stores
        \item it is \unspecified\ whether failing {\tt sc} instructions are stores or not
        \item Each AMO instruction is a load for the read portion of the
        operation. The address is always available to trigger on, although
        the value loaded might not be, depending on the hardware
        implementation.
        \item Each AMO instruction is a store for the write portion of the
        operation. The address is always available to trigger on, although
        the value stored might not be, depending on the hardware
        implementation.
        \end{steps}

        If the destination register of any load or AMO is \Rzero then it is
        \unspecified\ whether a load trigger with \FcsrMcontrolSelect=1 will
        match.  Whether store triggers with \FcsrMcontrolSelect=1 match on
        AMOs is \unspecified.
        <field name="type" bits="XLEN-1:XLEN-4" access="R" reset="6" />
        <field name="dmode" bits="XLEN-5" access="WARL" reset="0" />
        <field name="0" bits="XLEN-6:25" access="R" reset="0" />
        <field name="vs" bits="24" access="WARL" reset="0">
            When set, enable this trigger in VS-mode.
            This bit is hard-wired to 0 if the hart does not support
            virtualization mode.
        </field>
        <field name="vu" bits="23" access="WARL" reset="0">
            When set, enable this trigger in VU-mode.
            This bit is hard-wired to 0 if the hart does not support
            virtualization mode.
        </field>
        <field name="hit" bits="22" access="WARL" reset="0">
            If this bit is implemented, the hardware sets it when this
            trigger matches. The trigger's user can set or clear it at any
            time. It is used to determine which
            trigger(s) matched.  If the bit is not implemented, it is always 0
            and writing it has no effect.
        </field>
        <field name="select" bits="21" access="WARL" reset="0">
            This bit determines the contents of the XLEN-bit compare values.

            0: There is at least one compare value and it contains the lowest
            virtual address of the access.
            In addition, it is recommended that there are additional compare
            values for the other accessed virtual addresses match.
            (E.g. on a 32-bit read from 0x4000, the lowest address is 0x4000
            and the other addresses are 0x4001, 0x4002, and 0x4003.)

            1: There is exactly one compare value and it contains the data
            value loaded or stored, or the instruction executed.
            Any bits beyond the size of the data access will contain 0.
        </field>
        <field name="timing" bits="20" access="WARL" reset="0">
            0: The action for this trigger will be taken just before the
            instruction that triggered it is committed, but after all preceding
            instructions are committed. \Rmepc or \RcsrDpc (depending on
            \FcsrMcontrolSixAction) must be set to the virtual address of the
            instruction that matched.

            If this is combined with \FcsrMcontrolSixLoad and
            \FcsrMcontrolSixSelect=1 then a memory access will be
            performed (including any side effects of performing such an access) even
            though the load will not update its destination register. Debuggers
            should consider this when setting such breakpoints on, for example,
            memory-mapped I/O addresses.

            1: The action for this trigger will be taken after the instruction
            that triggered it is committed. It should be taken before the next
            instruction is committed, but it is better to implement triggers imprecisely
            than to not implement them at all.
            \Rmepc or \RcsrDpc (depending on \FcsrMcontrolSixAction) must be set to
            the virtual address of the next instruction that must be executed to
            preserve the program flow.

            Most hardware will only implement one timing or the other, possibly
            dependent on \FcsrMcontrolSixSelect, \FcsrMcontrolSixExecute,
            \FcsrMcontrolSixLoad, and \FcsrMcontrolSixStore. This bit
            primarily exists for the hardware to communicate to the debugger
            what will happen. Hardware may implement the bit fully writable, in
            which case the debugger has a little more control.

            Data load triggers with \FcsrMcontrolSixTiming of 0 will result in the same load
            happening again when the debugger lets the hart run. For data load
            triggers, debuggers must first attempt to set the breakpoint with
            \FcsrMcontrolSixTiming of 1.

            If a trigger with \FcsrMcontrolSixTiming of 0 matches, it is
            implementation-dependent whether that prevents a trigger with
            \FcsrMcontrolSixTiming of 1 matching as well.
        </field>
        <field name="size" bits="19:16" access="WARL" reset="0">
            0: The trigger will attempt to match against an access of any size.
            The behavior is only well-defined if $|select|=0$, or if the access
            size is XLEN.

            1: The trigger will only match against 8-bit memory accesses.

            2: The trigger will only match against 16-bit memory accesses or
            execution of 16-bit instructions.

            3: The trigger will only match against 32-bit memory accesses or
            execution of 32-bit instructions.

            4: The trigger will only match against execution of 48-bit instructions.

            5: The trigger will only match against 64-bit memory accesses or
            execution of 64-bit instructions.

            6: The trigger will only match against execution of 80-bit instructions.

            7: The trigger will only match against execution of 96-bit instructions.

            8: The trigger will only match against execution of 112-bit instructions.

            9: The trigger will only match against 128-bit memory accesses or
            execution of 128-bit instructions.

            An implementation must support the value of 0, but all other values
            are optional. When an implementation supports address triggers
            (\FcsrMcontrolSixSelect=0), it is recommended that those triggers
            support every access size that the hart supports, as well as for
            every instruction size that the hart supports.

            Implementations such as RV32D or RV64V are able to perform loads
            and stores that are wider than XLEN. Custom extensions may also
            support instructions that are wider than XLEN. Because
            \RcsrTdataTwo is of size XLEN, there is a known limitation that
            data value triggers (\FcsrMcontrolSixSelect=1) can only be supported
            for access sizes up to XLEN bits.  When an implementation supports
            data value triggers (\FcsrMcontrolSixSelect=1), it is recommended
            that those triggers support every access size up to XLEN that the
            hart supports, as well as for every instruction length up to XLEN
            that the hart supports.
        </field>
        <field name="action" bits="15:12" access="WARL" reset="0">
            The action to take when the trigger fires. The values are explained
            in Table~\ref{tab:action}.
        </field>
        <field name="chain" bits="11" access="WARL" reset="0">
            0: When this trigger matches, the configured action is taken.

            1: While this trigger does not match, it prevents the trigger with
            the next index from matching.

            A trigger chain starts on the first trigger with $|chain|=1$ after
            a trigger with $|chain|=0$, or simply on the first trigger if that
            has $|chain|=1$. It ends on the first trigger after that which has
            $|chain|=0$. This final trigger is part of the chain. The action
            on all but the final trigger is ignored.  The action on that final
            trigger will be taken if and only if all the triggers in the chain
            match at the same time.

            Debuggers should not terminate a chain with a trigger with a
            different type. It is undefined when exactly such a chain fires.

            Because \FcsrMcontrolSixChain affects the next trigger, hardware must zero it in
            writes to \RcsrMcontrolSix that set \FcsrTdataOneDmode to 0 if the next trigger has
            \FcsrTdataOneDmode of 1.
            In addition hardware should ignore writes to \RcsrMcontrolSix that set
            \FcsrTdataOneDmode to 1 if the previous trigger has both \FcsrTdataOneDmode of 0 and
            \FcsrMcontrolSixChain of 1. Debuggers must avoid the latter case by checking
            \FcsrMcontrolSixChain on the previous trigger if they're writing \RcsrMcontrolSix.

            Implementations that wish to limit the maximum length of a trigger
            chain (eg. to meet timing requirements) may do so by zeroing
            \FcsrMcontrolSixChain in writes to \RcsrMcontrolSix that would make the chain too long.
        </field>
        <field name="match" bits="10:7" access="WARL" reset="0">
            0: Matches when any compare value equals \RcsrTdataTwo.

            1: Matches when the top $M$ bits of any compare value match the top
            $M$ bits of \RcsrTdataTwo.
            $M$ is $|XLEN|-1$ minus the index of the least-significant bit
            containing 0 in \RcsrTdataTwo.
            \RcsrTdataTwo is WARL and bit $|maskmax6|-1$ will be set to 0 if no
            less significant bits are written with 0.
            Legal values for \RcsrTdataTwo require $M + |maskmax6| \geq |XLEN|$ and $M\gt0$.
            See above for how to determine maskmax6.

            2: Matches when any compare value is greater than (unsigned) or
            equal to \RcsrTdataTwo.

            3: Matches when any compare value is less than (unsigned)
            \RcsrTdataTwo.

            4: Matches when $\frac{|XLEN|}{2}-1$:$0$ of any compare value
            equals $\frac{|XLEN|}{2}-1$:$0$ of \RcsrTdataTwo after
            $\frac{|XLEN|}{2}-1$:$0$ of the compare value is ANDed with
            $|XLEN|-1$:$\frac{|XLEN|}{2}$ of \RcsrTdataTwo.

            5: Matches when $|XLEN|-1$:$\frac{|XLEN|}{2}$ of any compare
            value equals $\frac{|XLEN|}{2}-1$:$0$ of \RcsrTdataTwo after
            $|XLEN|-1$:$\frac{|XLEN|}{2}$ of the compare value is ANDed with
            $|XLEN|-1$:$\frac{|XLEN|}{2}$ of \RcsrTdataTwo.

            8: Matches when \FcsrMcontrolSixMatch$=0$ would not match.

            9: Matches when \FcsrMcontrolSixMatch$=1$ would not match.

            12: Matches when \FcsrMcontrolSixMatch$=4$ would not match.

            13: Matches when \FcsrMcontrolSixMatch$=5$ would not match.

            Other values are reserved for future use.

            All comparisons only look at the lower XLEN (in the current mode)
            bits of the compare values and of \RcsrTdataTwo.
            When \FcsrMcontrolSelect=1 and access size is N, this is further
            reduced, and comparisons only look at the lower N bits of the
            compare values and of \RcsrTdataTwo.
        </field>
        <field name="m" bits="6" access="WARL" reset="0">
            When set, enable this trigger in M-mode.
        </field>
        <field name="0" bits="5" access="R" reset="0" />
        <field name="s" bits="4" access="WARL" reset="0">
            When set, enable this trigger in S/HS-mode.
            This bit is hard-wired to 0 if the hart does not support
            S-mode.
        </field>
        <field name="u" bits="3" access="WARL" reset="0">
            When set, enable this trigger in U-mode.
            This bit is hard-wired to 0 if the hart does not support
            U-mode.
        </field>
        <field name="execute" bits="2" access="WARL" reset="0">
            When set, the trigger fires on the virtual address or opcode of an
            instruction that is executed.
        </field>
        <field name="store" bits="1" access="WARL" reset="0">
            When set, the trigger fires on the virtual address or data of any
            store.
        </field>
        <field name="load" bits="0" access="WARL" reset="0">
            When set, the trigger fires on the virtual address or data of any
            load.
        </field>
    </register>

    <register name="Instruction Count" short="icount" address="0x7a1">
        This register is accessible as \RcsrTdataOne when \FcsrTdataOneType is 3.

        If \FcsrIcountCount is not 0, then every instruction completed or
        trap taken from a mode where the trigger is enabled decrements
        \FcsrIcountCount by 1.
        When
        \FcsrIcountCount is decremented from 1 to 0 then \FcsrIcountPending
        becomes set. When \FcsrIcountPending is set, the trigger fires just
        before any further instructions are executed in a mode where the
        trigger is enabled. As the trigger fires, \FcsrIcountPending is
        cleared.

        \begin{commentary}
        The intent of this design is to cleanly handle the case where
        \FcsrIcountAction is 0, \FcsrIcountM is 0, \FcsrIcountU is 1,
        \FcsrIcountCount is 1, and the U-mode instruction being executed
        causes a trap into M-mode. In that case we want the entire M-mode
        handler to be executed, and the debug trap to be taken before the
        next U-mode instruction.
        \end{commentary}

        \begin{commentary}
        This trigger type is intended to be used as a single step that's
        useful both for external debuggers and for software monitor programs.
        For that case it is not necessary to support \FcsrIcountCount greater
        than 1.
        \end{commentary}

        <field name="type" bits="XLEN-1:XLEN-4" access="R" reset="3" />
        <field name="dmode" bits="XLEN-5" access="WARL" reset="0" />
        <field name="0" bits="XLEN-6:27" access="R" reset="0" />

        <field name="vs" bits="26" access="WARL" reset="0">
            When set, enable this trigger in VS-mode.
            This bit is hard-wired to 0 if the hart does not support
            virtualization mode.
        </field>
        <field name="vu" bits="25" access="WARL" reset="0">
            When set, enable this trigger in VU-mode.
            This bit is hard-wired to 0 if the hart does not support
            virtualization mode.
        </field>
        <field name="hit" bits="24" access="WARL" reset="0">
            If this bit is implemented, the hardware sets it when this
            trigger matches. The trigger's user can set or clear it at any
            time. It is used to determine which
            trigger(s) matched.  If the bit is not implemented, it is always 0
            and writing it has no effect.
        </field>
        <field name="count" bits="23:10" access="WARL" reset="1">
            When count is decremented to 0, the trigger fires. Instead of
            changing \FcsrIcountCount from 1 to 0, it is also acceptable for hardware to
            clear \FcsrIcountM, \FcsrIcountS, \FcsrIcountU, \FcsrIcountVs, and
            \FcsrIcountVu. This allows \FcsrIcountCount to be hard-wired
            to 1 if this register just exists for single step.
        </field>

        <field name="m" bits="9" access="WARL" reset="0">
            When set, enable this trigger in M-mode.
        </field>
        <field name="pending" bits="8" access="R/W" reset="0">
            This bit becomes set when \FcsrIcountCount is decremented from 1
            to 0. It is cleared when the trigger fires.
        </field>
        <field name="s" bits="7" access="WARL" reset="0">
            When set, enable this trigger in S/HS-mode.
            This bit is hard-wired to 0 if the hart does not support
            S-mode.
        </field>
        <field name="u" bits="6" access="WARL" reset="0">
            When set, enable this trigger in U-mode.
            This bit is hard-wired to 0 if the hart does not support
            U-mode.
        </field>

        <field name="action" bits="5:0" access="WARL" reset="0">
            The action to take when the trigger fires. The values are explained
            in Table~\ref{tab:action}.
        </field>
    </register>

    <register name="Interrupt Trigger" short="itrigger" address="0x7a1">
        This register is accessible as \RcsrTdataOne when \FcsrTdataOneType is 4.

        This trigger may fire on any of the interrupts configurable in \Rmie
        (described in the Privileged Spec). The interrupts to fire on are
        configured by setting the same bit in \RcsrTdataTwo as would be set in
        \Rmie to enable the interrupt.

        Hardware may only support a subset of interrupts for this trigger.  A
        debugger must read back \RcsrTdataTwo after writing it to confirm the
        requested functionality is actually supported.

        The trigger only fires if the hart takes a trap because of the
        interrupt. (E.g.\  it does not fire when a timer interrupt occurs but that
        interrupt is not enabled in \Rmie.)

        When the trigger fires, all CSRs are updated as defined by the
        Privileged Spec, and the requested action is taken just before the
        first instruction of the trap handler is executed.

        <field name="type" bits="XLEN-1:XLEN-4" access="R" reset="4" />
        <field name="dmode" bits="XLEN-5" access="WARL" reset="0" />
        <field name="hit" bits="XLEN-6" access="WARL" reset="0">
            If this bit is implemented, the hardware sets it when this
            trigger matches. The trigger's user can set or clear it at any
            time. It is used to determine which
            trigger(s) matched.  If the bit is not implemented, it is always 0
            and writing it has no effect.
        </field>
        <field name="0" bits="XLEN-7:13" access="R" reset="0" />
        <field name="vs" bits="12" access="WARL" reset="0">
          When set, enable this trigger for interrupts that are taken from VS
          mode.
          This bit is hard-wired to 0 if the hart does not support
          virtualization mode.
        </field>
        <field name="vu" bits="11" access="WARL" reset="0">
          When set, enable this trigger for interrupts that are taken from VU
          mode.
          This bit is hard-wired to 0 if the hart does not support
          virtualization mode.
        </field>
        <field name="0" bits="10" access="R" reset="0" />
        <field name="m" bits="9" access="WARL" reset="0">
            When set, enable this trigger for interrupts that are taken from M
            mode.
        </field>
        <field name="0" bits="8" access="R" reset="0" />
        <field name="s" bits="7" access="WARL" reset="0">
            When set, enable this trigger for interrupts that are taken from S/HS
            mode.
            This bit is hard-wired to 0 if the hart does not support
            S-mode.
        </field>
        <field name="u" bits="6" access="WARL" reset="0">
            When set, enable this trigger for interrupts that are taken from U
            mode.
            This bit is hard-wired to 0 if the hart does not support
            U-mode.
        </field>
        <field name="action" bits="5:0" access="WARL" reset="0">
            The action to take when the trigger fires. The values are explained
            in Table~\ref{tab:action}.
        </field>
    </register>

    <register name="Exception Trigger" short="etrigger" address="0x7a1">
        This register is accessible as \RcsrTdataOne when \FcsrTdataOneType is 5.

        This trigger may fire on up to XLEN of the Exception Codes defined in
        \Rmcause (described in the Privileged Spec, with Interrupt=0). Those
        causes are configured by writing the corresponding bit in \RcsrTdataTwo.
        (E.g.\  to trap on an illegal instruction, the debugger sets bit 2 in
        \RcsrTdataTwo.)

        Hardware may support only a subset of exceptions. A debugger must read
        back \RcsrTdataTwo after writing it to confirm the requested functionality
        is actually supported.

        When the trigger fires, all CSRs are updated as defined by the
        Privileged Spec, and the requested action is taken just before the
        first instruction of the trap handler is executed.

        <field name="type" bits="XLEN-1:XLEN-4" access="R" reset="4" />
        <field name="dmode" bits="XLEN-5" access="WARL" reset="0" />
        <field name="hit" bits="XLEN-6" access="WARL" reset="0">
            If this bit is implemented, the hardware sets it when this
            trigger matches. The trigger's user can set or clear it at any
            time. It is used to determine which
            trigger(s) matched.  If the bit is not implemented, it is always 0
            and writing it has no effect.
        </field>
        <field name="0" bits="XLEN-7:13" access="R" reset="0" />
        <field name="vs" bits="12" access="WARL" reset="0">
          When set, enable this trigger for exceptions that are taken from VS
          mode.
          This bit is hard-wired to 0 if the hart does not support
          virtualization mode.
        </field>
        <field name="vu" bits="11" access="WARL" reset="0">
          When set, enable this trigger for exceptions that are taken from VU
          mode.
          This bit is hard-wired to 0 if the hart does not support
          virtualization mode.
        </field>
        <field name="nmi" bits="10" access="WARL" reset="0">
            When set, non-maskable interrupts cause this
            trigger to fire, regardless of the values of \FcsrEtriggerM, \FcsrEtriggerS, and \FcsrEtriggerU.
        </field>
        <field name="m" bits="9" access="WARL" reset="0">
            When set, enable this trigger for exceptions that are taken from M
            mode.
        </field>
        <field name="0" bits="8" access="R" reset="0" />
        <field name="s" bits="7" access="WARL" reset="0">
            When set, enable this trigger for exceptions that are taken from S/HS
            mode.
            This bit is hard-wired to 0 if the hart does not support
            S-mode.
        </field>
        <field name="u" bits="6" access="WARL" reset="0">
            When set, enable this trigger for exceptions that are taken from U
            mode.
            This bit is hard-wired to 0 if the hart does not support
            U-mode.
        </field>
        <field name="action" bits="5:0" access="WARL" reset="0">
            The action to take when the trigger fires. The values are explained
            in Table~\ref{tab:action}.
        </field>
    </register>

    <register name="External Trigger" short="tmexttrigger" address="0x7a1">
        This register is accessible as \RcsrTdataOne when \FcsrTdataOneType is 7.

        This trigger fires when any selected TM external trigger input
        signals.  Up to 16 TM external
        trigger inputs coming from other blocks outside the TM,
        (e.g. signaling an hpmcounter overflow) can be selected.  Hardware
        may support none or just a few TM external trigger inputs
        (starting with TM external trigger input 0 and continuing
        sequentially).  Unsupported inputs are hardwired to be inactive.

        <field name="type" bits="XLEN-1:XLEN-4" access="R" reset="4" />
        <field name="dmode" bits="XLEN-5" access="WARL" reset="0" />
        <field name="hit" bits="XLEN-6" access="WARL" reset="0">
            If this bit is implemented, the hardware sets it when this
            trigger matches. The trigger's user can set or clear it at any
            time. It is used to determine which
            trigger(s) matched.  If the bit is not implemented, it is always 0
            and writing it has no effect.
        </field>
        <field name="0" bits="XLEN-7:23" access="R" reset="0" />
        <field name="intctl" bits="22" access="WARL" reset="0">
            This optional bit, when set, causes this trigger to fire whenever an attached
            interrupt controller signals a trigger.
        </field>
        <field name="select" bits="21:6" access="WARL" reset="0">
            Selects any combination of up to 16 external debug trigger inputs
            that cause this trigger to fire.
        </field>
        <field name="action" bits="5:0" access="WARL" reset="0">
            The action to take when the trigger fires. The values are explained
            in Table~\ref{tab:action}.
        </field>
    </register>

    <register name="Trigger Extra (RV32)" short="textra32" address="0x7a3">
        This register is accessible as \RcsrTdataThree when \FcsrTdataOneType is 2, 3, 4,
        5, or 6 and XLEN=32.

        All functionality in this register is optional. The $|value|$ bits may
        tie any number of upper bits to 0. The $|select|$ bits may only support
        0 (ignore).

        Byte-granular comparison of \RcsrScontext to \FcsrTextraThirtytwoSvalue
        allows \RcsrScontext to be defined to include more than one element of comparison.
        For example, software instrumentation can program the \RcsrScontext value to be
        the concatenation of different ID contexts such as process ID and thread ID.
        The user can then program byte compares based on \FcsrTextraThirtytwoSbytemask
        to include one or more of the contexts in the compare.
        
        Byte masking only applies to \RcsrScontext comparison; i.e when \FcsrTextraThirtytwoSselect is 1.
        
        <field name="mhvalue" bits="31:26" access="WARL" reset="0">
            Data used together with \FcsrTextraThirtytwoMhselect.
        </field>
        <field name="mhselect" bits="25:23" access="WARL" reset="0">
            0: Ignore \FcsrTextraThirtytwoMhvalue.

            4: This trigger will only match if the low bits of
            \RcsrMcontext/\RcsrHcontext equal \FcsrTextraThirtytwoMhvalue.

            1, 5: This trigger will only match if the low bits of
            \RcsrMcontext/\RcsrHcontext equal \{\FcsrTextraThirtytwoMhvalue, mhselect[2]\}.

            2, 6: This trigger will only match if VMID in hgatp equals the lower VMIDMAX
            (defined in the Privileged Spec) bits of \{\FcsrTextraThirtytwoMhvalue, mhselect[2]\}.

            3, 7: Reserved.

            If the H extension is not supported, the only legal values are 0 and 4.
        </field>

        <field name="0" bits="22:20" access="R" reset="0" />
        
        <field name="sbytemask" bits="19:18" access="WARL" reset="0">
            When the least significant bit of this field is 1, it causes bits 7:0
            in the comparison to be ignored, when \FcsrTextraThirtytwoSselect=1.
            When the next most significant bit of this field is 1, it causes bits 15:8
            to be ignored in the comparison, when \FcsrTextraThirtytwoSselect=1.
        </field>

        <field name="svalue" bits="17:2" access="WARL" reset="0">
            Data used together with \FcsrTextraThirtytwoSselect.

            This field should be tied to 0 when S-mode is not supported.
        </field>
        <field name="sselect" bits="1:0" access="WARL" reset="0">
            0: Ignore \FcsrTextraThirtytwoSvalue.

            1: This trigger will only match if the low bits of
            \RcsrScontext equal \FcsrTextraThirtytwoSvalue.

            2: This trigger will only match if the currently active ASID
            value, from either \Rsatp or \Rvsatp,
            equals the lower ASIDMAX (defined in the Privileged Spec) bits of
            \FcsrTextraThirtytwoSvalue.

            This field should be tied to 0 when S-mode is not supported.
        </field>

    </register>

    <register name="Trigger Extra (RV64)" short="textra64" address="0x7a3">
        This register is accessible as \RcsrTdataThree when \FcsrTdataOneType is 2, 3, 4,
        5, or 6 and XLEN=64. The fields are defined
        above, in \RcsrTextraThirtytwo.

        Byte-granular comparison of \RcsrScontext to \FcsrTextraSixtyfourSvalue in
        \RcsrTextraSixtyfour allows \RcsrScontext to be defined to include
        more than one element of comparison.  For example, software instrumentation
        can program the \RcsrScontext value to be the concatenation of different ID contexts
        such as process ID and thread ID.  The user can then program byte compares based on
        \FcsrTextraSixtyfourSbytemask to include one or more of the contexts in the compare.
        
        Byte masking only applies to \RcsrScontext comparison; i.e when \FcsrTextraSixtyfourSselect is 1.
        
        <field name="mhvalue" bits="63:51" access="WARL" reset="0">
        </field>
        <field name="mhselect" bits="50:48" access="WARL" reset="0">
        </field>

        <field name="0" bits="47:41" access="R" reset="0" />

        <field name="sbytemask" bits="40:36" access="WARL" reset="0">
            When the least significant bit of this field is 1, it causes bits 7:0
            in the comparison to be ignored, when \FcsrTextraSixtyfourSselect=1.
            Likewise, the second bit controls the comparison of bits 15:8,
            third bit controls the comparison of bits 23:16,
            fourth bit controls the comparison of bits 31:24, and
            fifth bit controls the comparison of bits 33:32.
        </field>
        <field name="svalue" bits="35:2" access="WARL" reset="0">
        </field>
        <field name="sselect" bits="1:0" access="WARL" reset="0">
        </field>

    </register>
</registers>
